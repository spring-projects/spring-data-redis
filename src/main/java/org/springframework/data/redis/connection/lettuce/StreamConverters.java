/*
 * Copyright 2018-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.data.redis.connection.lettuce;

import io.lettuce.core.StreamDeletionPolicy;
import io.lettuce.core.StreamMessage;
import io.lettuce.core.XAddArgs;
import io.lettuce.core.XClaimArgs;
import io.lettuce.core.XReadArgs;
import io.lettuce.core.XTrimArgs;
import io.lettuce.core.models.stream.PendingMessage;
import io.lettuce.core.models.stream.PendingMessages;
import io.lettuce.core.models.stream.StreamEntryDeletionResult;

import java.time.Duration;
import java.util.List;

import org.springframework.core.convert.converter.Converter;
import org.springframework.data.redis.connection.RedisStreamCommands;
import org.springframework.data.redis.connection.RedisStreamCommands.XClaimOptions;
import org.springframework.data.redis.connection.RedisStreamCommands.XAddOptions;
import org.springframework.data.redis.connection.RedisStreamCommands.XTrimOptions;
import org.springframework.data.redis.connection.RedisStreamCommands.XDelOptions;
import org.springframework.data.redis.connection.stream.ByteRecord;
import org.springframework.data.redis.connection.stream.Consumer;
import org.springframework.data.redis.connection.stream.PendingMessagesSummary;
import org.springframework.data.redis.connection.stream.RecordId;
import org.springframework.data.redis.connection.stream.StreamReadOptions;
import org.springframework.data.redis.connection.stream.StreamRecords;

/**
 * Converters for Redis Stream-specific types.
 * <p>
 * Converters typically convert between value objects/argument objects retaining the actual types of values (i.e. no
 * serialization/deserialization happens here).
 *
 * @author Mark Paluch
 * @author Christoph Strobl
 * @author Viktoriya Kutsarova
 * @since 2.2
 */
@SuppressWarnings({ "rawtypes" })
class StreamConverters {

	/**
	 * Convert {@link StreamReadOptions} to Lettuce's {@link XReadArgs}.
	 *
	 * @param readOptions must not be {@literal null}.
	 * @return the converted {@link XReadArgs}.
	 */
	static XReadArgs toReadArgs(StreamReadOptions readOptions) {
		return StreamReadOptionsToXReadArgsConverter.INSTANCE.convert(readOptions);
	}

	/**
	 * Convert {@link XClaimOptions} to Lettuce's {@link XClaimArgs}.
	 *
	 * @param options must not be {@literal null}.
	 * @return the converted {@link XClaimArgs}.
	 * @since 2.3
	 */
	static XClaimArgs toXClaimArgs(XClaimOptions options) {
		return XClaimOptionsToXClaimArgsConverter.INSTANCE.convert(options);
	}

	static XAddArgs toXAddArgs(RecordId recordId, XAddOptions options) {
		XAddArgs args = XAddOptionsToXAddArgsConverter.INSTANCE.convert(options);
		if (!recordId.shouldBeAutoGenerated()) {
			args.id(recordId.getValue());
		}
		return args;
	}

	static XTrimArgs toXTrimArgs(XTrimOptions options) {
		return XTrimOptionsToXTrimArgsConverter.INSTANCE.convert(options);
	}

	static StreamDeletionPolicy toXDelArgs(XDelOptions options) {
		return toStreamDeletionPolicy(options.getDeletionPolicy());
	}

	static Converter<StreamMessage<byte[], byte[]>, ByteRecord> byteRecordConverter() {
		return (it) -> StreamRecords.newRecord().in(it.getStream()).withId(it.getId()).ofBytes(it.getBody());
	}

	/**
	 * Convert the raw Lettuce xpending result to {@link PendingMessages}.
	 *
	 * @param groupName the group name
	 * @param range the range of messages requested
	 * @param source the raw lettuce response.
	 * @return
	 * @since 2.3
	 */
	static org.springframework.data.redis.connection.stream.PendingMessages toPendingMessages(String groupName,
			org.springframework.data.domain.Range<?> range, List<PendingMessage> source) {

		List<org.springframework.data.redis.connection.stream.PendingMessage> messages = source.stream().map(it -> {

			RecordId id = RecordId.of(it.getId());
			Consumer consumer = Consumer.from(groupName, it.getConsumer());

			return new org.springframework.data.redis.connection.stream.PendingMessage(id, consumer,
					Duration.ofMillis(it.getMsSinceLastDelivery()), it.getRedeliveryCount());

		}).toList();

		return new org.springframework.data.redis.connection.stream.PendingMessages(groupName, messages).withinRange(range);
	}

	/**
	 * Convert the raw Lettuce {@code xpending} result to {@link PendingMessagesSummary}.
	 *
	 * @param groupName
	 * @param source the raw lettuce response.
	 * @return
	 * @since 2.3
	 */
	static PendingMessagesSummary toPendingMessagesInfo(String groupName, PendingMessages source) {

		org.springframework.data.domain.Range<String> range = source.getMessageIds().isUnbounded()
				? org.springframework.data.domain.Range.unbounded()
				: org.springframework.data.domain.Range.open(source.getMessageIds().getLower().getValue(),
						source.getMessageIds().getUpper().getValue());

		return new PendingMessagesSummary(groupName, source.getCount(), range, source.getConsumerMessageCount());
	}

	/**
	 * {@link Converter} to convert {@link StreamReadOptions} to Lettuce's {@link XReadArgs}.
	 */
	enum StreamReadOptionsToXReadArgsConverter implements Converter<StreamReadOptions, XReadArgs> {

		INSTANCE;

		@Override
		public XReadArgs convert(StreamReadOptions source) {

			XReadArgs args = new XReadArgs();

			if (source.isNoack()) {
				args.noack(true);
			}

			if (source.getBlock() != null) {
				args.block(source.getBlock());
			}

			if (source.getCount() != null) {
				args.count(source.getCount());
			}
			return args;
		}
	}

	/**
	 * {@link Converter} to convert {@link XClaimOptions} to Lettuce's {@link XClaimArgs}.
	 *
	 * @since 2.3
	 */
	enum XClaimOptionsToXClaimArgsConverter implements Converter<XClaimOptions, XClaimArgs> {
		INSTANCE;

		@Override
		public XClaimArgs convert(XClaimOptions source) {

			XClaimArgs args = XClaimArgs.Builder.minIdleTime(source.getMinIdleTime());
			args.minIdleTime(source.getMinIdleTime());
			args.force(source.isForce());

			if (source.getIdleTime() != null) {
				args.idle(source.getIdleTime());
			}
			if (source.getRetryCount() != null) {
				args.retryCount(source.getRetryCount());
			}
			if (source.getUnixTime() != null) {
				args.time(source.getUnixTime());
			}
			return args;

		}
	}

	/**
	 * {@link Converter} to convert {@link XAddOptions} to Lettuce's {@link XAddArgs}.
	 *
	 * @since 4.0
	 */
	enum XAddOptionsToXAddArgsConverter implements Converter<XAddOptions, XAddArgs> {

		INSTANCE;

		@Override
		public XAddArgs convert(XAddOptions source) {

			XAddArgs args = new XAddArgs();

			args.nomkstream(source.isNoMkStream());

			XTrimOptions trimOptions = source.getTrimOptions();
			RedisStreamCommands.TrimStrategy<?> trimStrategy = trimOptions.getTrimStrategy();
			if (trimStrategy instanceof RedisStreamCommands.MaxLenTrimStrategy maxLenTrimStrategy) {
				args.maxlen(maxLenTrimStrategy.threshold());
			}
			else if (trimStrategy instanceof RedisStreamCommands.MinIdTrimStrategy minIdTrimStrategy) {
				args.minId(minIdTrimStrategy.threshold().getValue());
			}

			if (trimOptions.hasLimit()) {
				args.limit(trimOptions.getLimit());
			}

			args.exactTrimming(trimOptions.getTrimOperator() == RedisStreamCommands.TrimOperator.EXACT);
			args.approximateTrimming(trimOptions.getTrimOperator() == RedisStreamCommands.TrimOperator.APPROXIMATE);

			if (trimOptions.hasDeletionPolicy()) {
				args.trimmingMode(toStreamDeletionPolicy(trimOptions.getDeletionPolicy()));
			}

			return args;
		}
	}

	enum XTrimOptionsToXTrimArgsConverter implements Converter<XTrimOptions, XTrimArgs> {
		INSTANCE;

		@Override
		public XTrimArgs convert(XTrimOptions source) {

			XTrimArgs args = new XTrimArgs();

			RedisStreamCommands.TrimStrategy<?> trimStrategy = source.getTrimStrategy();
			if (trimStrategy instanceof RedisStreamCommands.MaxLenTrimStrategy maxLenTrimStrategy) {
				args.maxlen(maxLenTrimStrategy.threshold());
			}
			else if (trimStrategy instanceof RedisStreamCommands.MinIdTrimStrategy minIdTrimStrategy) {
				args.minId(minIdTrimStrategy.threshold().getValue());
			}

			if (source.hasLimit()) {
				args.limit(source.getLimit());
			}

			args.exactTrimming(source.getTrimOperator() == RedisStreamCommands.TrimOperator.EXACT);
			args.approximateTrimming(source.getTrimOperator() == RedisStreamCommands.TrimOperator.APPROXIMATE);

			if (source.hasDeletionPolicy()) {
				args.trimmingMode(toStreamDeletionPolicy(source.getDeletionPolicy()));
			}

			return args;
		}
	}

	public static StreamDeletionPolicy toStreamDeletionPolicy(RedisStreamCommands.StreamDeletionPolicy deletionPolicy) {

		return switch (deletionPolicy) {
			case KEEP_REFERENCES -> StreamDeletionPolicy.KEEP_REFERENCES;
			case DELETE_REFERENCES -> StreamDeletionPolicy.DELETE_REFERENCES;
			case ACKNOWLEDGED -> StreamDeletionPolicy.ACKNOWLEDGED;
		};
	}

	/**
	 * Convert Lettuce {@link io.lettuce.core.models.stream.StreamEntryDeletionResult} to Spring Data Redis
	 * {@link StreamEntryDeletionResult}.
	 *
	 * @param result the Lettuce deletion result enum
	 * @return the corresponding Spring Data Redis enum
	 * @since 4.0
	 */
	static RedisStreamCommands.StreamEntryDeletionResult toStreamEntryDeletionResult(
			StreamEntryDeletionResult result) {
		return switch (result) {
			case UNKNOWN -> RedisStreamCommands.StreamEntryDeletionResult.UNKNOWN;
			case NOT_FOUND -> RedisStreamCommands.StreamEntryDeletionResult.NOT_FOUND;
			case DELETED -> RedisStreamCommands.StreamEntryDeletionResult.DELETED;
			case NOT_DELETED_UNACKNOWLEDGED_OR_STILL_REFERENCED ->
					RedisStreamCommands.StreamEntryDeletionResult.NOT_DELETED_UNACKNOWLEDGED_OR_STILL_REFERENCED;
		};
	}

	/**
	 * Convert a list of Lettuce {@link io.lettuce.core.models.stream.StreamEntryDeletionResult} to a {@link List} of Spring Data Redis
	 * {@link RedisStreamCommands.StreamEntryDeletionResult}.
	 *
	 * @param results the list of Lettuce deletion result enums
	 * @return the list of Spring Data Redis deletion result enums
	 * @since 4.0
	 */
	static List<RedisStreamCommands.StreamEntryDeletionResult> toStreamEntryDeletionResults(
			List<StreamEntryDeletionResult> results) {
		return results.stream().map(StreamConverters::toStreamEntryDeletionResult).toList();
	}
}
